const e={"/":{type:"folder",name:"branded-static-boilerplate",title:"Project Root Directory",description:"The main folder containing your entire web project. Everything starts here!",importance:"high",category:"root",details:"\n      <p>This is your project's <strong>root directory</strong> - think of it as the main folder that contains your entire website.</p>\n      <h5>🎯 Key Concepts:</h5>\n      <ul>\n        <li><strong>Single Source of Truth:</strong> Everything related to your project lives here</li>\n        <li><strong>Version Control:</strong> This folder is tracked by Git</li>\n        <li><strong>Deployment Unit:</strong> When you deploy, this entire folder goes to the server</li>\n      </ul>\n      <h5>💡 Best Practices:</h5>\n      <ul>\n        <li>Keep the root clean - only essential files and folders</li>\n        <li>Use descriptive folder names that explain their purpose</li>\n        <li>Include a README.md to explain your project</li>\n      </ul>\n    ",links:[{text:"Project Structure Guide",url:"/docs/tutorials/project-structure.md"},{text:"Git Best Practices",url:"/docs/tutorials/git-workflow.md"}]},"/package.json":{type:"file",fileType:"config",name:"package.json",title:"Project Configuration & Dependencies",description:"The blueprint of your project - lists dependencies, scripts, and metadata.",importance:"high",details:'\n      <p><strong>package.json</strong> is like your project\'s ID card and instruction manual combined.</p>\n      <h5>📋 What it contains:</h5>\n      <ul>\n        <li><strong>Dependencies:</strong> External libraries your project needs</li>\n        <li><strong>Scripts:</strong> Commands you can run (build, test, deploy)</li>\n        <li><strong>Metadata:</strong> Project name, version, description</li>\n      </ul>\n      <h5>🔧 Example Scripts:</h5>\n      <pre><code>{\n  "scripts": {\n    "dev": "vite",\n    "build": "vite build",\n    "test": "jest"\n  }\n}</code></pre>\n    ',links:[{text:"NPM Package.json Guide",url:"https://docs.npmjs.com/cli/v8/configuring-npm/package-json"}]},"/vite.config.js":{type:"file",fileType:"config",name:"vite.config.js",title:"Build Tool Configuration",description:"Vite bundler settings for development server and production builds.",importance:"high",details:"\n      <p><strong>Vite</strong> is your build tool - it transforms your source code into optimized websites.</p>\n      <h5>⚡ What Vite Does:</h5>\n      <ul>\n        <li><strong>Development Server:</strong> Hot reload for instant feedback</li>\n        <li><strong>Bundling:</strong> Combines multiple files for performance</li>\n        <li><strong>Optimization:</strong> Minifies and compresses for faster loading</li>\n      </ul>\n      <h5>🔧 Common Configuration:</h5>\n      <pre><code>export default {\n  root: './src',\n  build: {\n    outDir: '../dist'\n  }\n}</code></pre>\n    ",links:[{text:"Vite Guide",url:"https://vitejs.dev/guide/"}]},"/.gitignore":{type:"file",fileType:"config",name:".gitignore",title:"Git Ignore Rules",description:"Tells Git which files to ignore (node_modules, build outputs, etc.).",importance:"medium",details:"\n      <p><strong>.gitignore</strong> keeps your repository clean by excluding unnecessary files.</p>\n      <h5>🚫 Common Ignores:</h5>\n      <pre><code>node_modules/    # Dependencies\ndist/           # Build output\n.env            # Secret keys\n.DS_Store       # Mac system files</code></pre>\n      <h5>💡 Why Ignore?</h5>\n      <ul>\n        <li><strong>Size:</strong> node_modules can be huge</li>\n        <li><strong>Security:</strong> Never commit secrets</li>\n        <li><strong>Cleanliness:</strong> Focus on source code</li>\n      </ul>\n    "},"/README.md":{type:"file",fileType:"docs",name:"README.md",title:"Project Documentation",description:"The first thing people see - explains what your project does and how to use it.",importance:"high",details:"\n      <p><strong>README.md</strong> is your project's front door - make a great first impression!</p>\n      <h5>📋 Essential Sections:</h5>\n      <ul>\n        <li><strong>Project Title & Description:</strong> What does it do?</li>\n        <li><strong>Installation:</strong> How to get started</li>\n        <li><strong>Usage:</strong> Basic examples</li>\n        <li><strong>Contributing:</strong> How others can help</li>\n      </ul>\n      <h5>✨ Pro Tips:</h5>\n      <ul>\n        <li>Use screenshots and GIFs to show functionality</li>\n        <li>Include live demo links</li>\n        <li>Keep it concise but comprehensive</li>\n      </ul>\n    "}},t={"/src":{type:"folder",name:"src",title:"Source Code Directory",description:"Your website's source code lives here - HTML, CSS, JavaScript, and assets.",importance:"high",category:"source",details:"\n      <p>The <strong>src</strong> (source) folder contains all the code that makes your website work.</p>\n      <h5>🏗️ Architecture Pattern:</h5>\n      <ul>\n        <li><strong>Separation of Concerns:</strong> Different types of code in different folders</li>\n        <li><strong>Component-Based:</strong> Reusable UI pieces grouped together</li>\n        <li><strong>Asset Organization:</strong> Images, fonts, and other files organized logically</li>\n      </ul>\n      <h5>📁 Typical Structure:</h5>\n      <pre><code>src/\n├── components/  ← Reusable UI pieces\n├── styles/      ← CSS and styling\n├── scripts/     ← JavaScript functionality\n├── assets/      ← Images, fonts, etc.\n└── pages/       ← Individual HTML pages</code></pre>\n    ",links:[{text:"Component Architecture",url:"/docs/tutorials/components.md"},{text:"Asset Organization",url:"/docs/tutorials/assets.md"}]},"/src/scripts":{type:"folder",name:"scripts",title:"JavaScript Functionality",description:"Interactive behavior and application logic for your website.",importance:"high",category:"source",details:"\n      <p><strong>JavaScript</strong> brings your website to life with interactivity and dynamic behavior.</p>\n      <h5>⚡ Modern JavaScript Features:</h5>\n      <ul>\n        <li><strong>ES6+ Modules:</strong> Import/export for code organization</li>\n        <li><strong>Progressive Enhancement:</strong> Works without JS, better with JS</li>\n        <li><strong>Performance:</strong> Lazy loading and code splitting</li>\n      </ul>\n      <h5>🏗️ Architecture Pattern:</h5>\n      <pre><code>scripts/\n├── core/      ← Essential functionality\n├── modules/   ← Feature-specific code\n└── utils/     ← Helper functions</code></pre>\n    "}},n={"/src/components":{type:"folder",name:"components",title:"Reusable UI Components",description:"LEGO blocks for your website - reusable pieces of HTML, CSS, and JavaScript.",importance:"high",category:"source",details:"\n      <p><strong>Components</strong> are like LEGO blocks - reusable pieces you can combine to build your website.</p>\n      <h5>🧩 Component Benefits:</h5>\n      <ul>\n        <li><strong>Reusability:</strong> Write once, use everywhere</li>\n        <li><strong>Maintainability:</strong> Fix bugs in one place</li>\n        <li><strong>Consistency:</strong> Same look and behavior across pages</li>\n        <li><strong>Testability:</strong> Easy to test individual pieces</li>\n      </ul>\n      <h5>📦 Component Structure:</h5>\n      <pre><code>header/\n├── header.html  ← Structure\n├── header.css   ← Styling\n├── header.js    ← Behavior\n└── README.md    ← Documentation</code></pre>\n    ",links:[{text:"Building Components",url:"/docs/tutorials/component-creation.md"},{text:"Component Best Practices",url:"/docs/tutorials/component-patterns.md"}]},"/src/components/header":{type:"folder",name:"header",title:"Header Component",description:"Site navigation and branding component used across all pages.",importance:"medium",category:"source"},"/src/components/header/header.html":{type:"file",fileType:"markup",name:"header.html",title:"Header Structure",description:"HTML structure for the site header with navigation and branding.",importance:"medium"},"/src/components/header/header.css":{type:"file",fileType:"style",name:"header.css",title:"Header Styling",description:"CSS styles for header appearance, layout, and responsive behavior.",importance:"medium"},"/src/components/header/header.js":{type:"file",fileType:"script",name:"header.js",title:"Header Functionality",description:"JavaScript for mobile menu toggle and interactive features.",importance:"medium"}},o={"/src/styles":{type:"folder",name:"styles",title:"CSS Styling System",description:"Organized CSS architecture with variables, utilities, and component styles.",importance:"high",category:"source",details:"\n      <p>A well-organized <strong>CSS architecture</strong> makes your styles maintainable and scalable.</p>\n      <h5>🎨 CSS Organization:</h5>\n      <ul>\n        <li><strong>Variables:</strong> Design tokens (colors, spacing, fonts)</li>\n        <li><strong>Base:</strong> Fundamental styles and resets</li>\n        <li><strong>Utilities:</strong> Helper classes for rapid development</li>\n        <li><strong>Components:</strong> Specific component styling</li>\n      </ul>\n      <h5>📏 CSS Methodology:</h5>\n      <pre><code>/* BEM Naming Convention */\n.bsb-header { }           /* Block */\n.bsb-header__logo { }     /* Element */\n.bsb-header--dark { }     /* Modifier */</code></pre>\n    ",links:[{text:"CSS Architecture Guide",url:"/docs/tutorials/css-architecture.md"},{text:"Design System",url:"/docs/tutorials/design-system.md"}]},"/src/styles/base":{type:"folder",name:"base",title:"Base Styles",description:"Fundamental CSS including variables, typography, and browser resets.",importance:"high",category:"source"},"/src/styles/base/variables.css":{type:"file",fileType:"style",name:"variables.css",title:"CSS Custom Properties",description:"Design tokens for colors, spacing, typography, and theme switching.",importance:"high",details:"\n      <p><strong>CSS Custom Properties</strong> (variables) are your design system's foundation.</p>\n      <h5>🎨 Design Tokens:</h5>\n      <pre><code>:root {\n  /* Colors */\n  --bsb-primary: #3b82f6;\n  --bsb-secondary: #8b5cf6;\n\n  /* Spacing */\n  --bsb-space-1: 0.25rem;\n  --bsb-space-2: 0.5rem;\n\n  /* Typography */\n  --bsb-font-sans: system-ui, sans-serif;\n}</code></pre>\n      <h5>✨ Benefits:</h5>\n      <ul>\n        <li><strong>Consistency:</strong> Same values across all components</li>\n        <li><strong>Theming:</strong> Easy light/dark mode switching</li>\n        <li><strong>Maintainability:</strong> Change once, update everywhere</li>\n      </ul>\n    "}},i={"/tests":{type:"folder",name:"tests",title:"Test Suite",description:"Automated tests to ensure your code works correctly and prevent bugs.",importance:"high",category:"quality",details:"\n      <p><strong>Testing</strong> is your safety net - it catches bugs before users do!</p>\n      <h5>🧪 Testing Strategy:</h5>\n      <ul>\n        <li><strong>Unit Tests:</strong> Test individual functions and components</li>\n        <li><strong>Integration Tests:</strong> Test how parts work together</li>\n        <li><strong>Accessibility Tests:</strong> Ensure inclusive design</li>\n      </ul>\n      <h5>🛡️ Benefits:</h5>\n      <ul>\n        <li><strong>Confidence:</strong> Deploy without fear</li>\n        <li><strong>Documentation:</strong> Tests show how code should work</li>\n        <li><strong>Refactoring:</strong> Change code safely</li>\n      </ul>\n    ",links:[{text:"Testing Guide",url:"/docs/tutorials/testing.md"},{text:"Jest Documentation",url:"https://jestjs.io/docs/getting-started"}]},"/docs":{type:"folder",name:"docs",title:"Documentation",description:"Project documentation, tutorials, and guides for developers.",importance:"medium",category:"docs",details:"\n      <p><strong>Documentation</strong> is your project's instruction manual - essential for collaboration and maintenance.</p>\n      <h5>📚 Documentation Types:</h5>\n      <ul>\n        <li><strong>README:</strong> Project overview and getting started</li>\n        <li><strong>Tutorials:</strong> Step-by-step learning guides</li>\n        <li><strong>API Docs:</strong> Function and component references</li>\n        <li><strong>Examples:</strong> Real-world usage patterns</li>\n      </ul>\n      <h5>✍️ Writing Tips:</h5>\n      <ul>\n        <li>Write for your future self who forgot everything</li>\n        <li>Include code examples for every concept</li>\n        <li>Keep it up-to-date with code changes</li>\n      </ul>\n    "}},s=e=>{if(null===e||"object"!=typeof e)return e;if(e instanceof Date)return new Date(e.getTime());if(e instanceof Array)return e.map((e=>s(e)));const t={};for(const n in e)Object.hasOwn(e,n)&&(t[n]=s(e[n]));return t},r=()=>s({...e,...t,...n,...o,...i});export{r as getAllFileData};
