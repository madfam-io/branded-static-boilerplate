[{"filePath":"/Users/aldoruizluna/labspace/branded-static-boilerplate/src/scripts/seo/seo-utils.js","messages":[{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":350,"column":50,"nodeType":"Program","messageId":"trailingSpace","endLine":350,"endColumn":52,"fix":{"range":[10551,10553],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":388,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":388,"endColumn":3,"fix":{"range":[11629,11631],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":393,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":393,"endColumn":3,"fix":{"range":[11784,11786],"text":""}},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'generateEducationalSchema' has too many lines (58). Maximum allowed is 50.","line":402,"column":42,"nodeType":"FunctionExpression","messageId":"exceed","endLine":466,"endColumn":2}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"/**\n * =============================================================================\n * SEO UTILITIES - Search Engine Optimization Tools\n * =============================================================================\n *\n * This module provides comprehensive SEO utilities for optimizing pages\n * and teaching SEO best practices through interactive examples.\n *\n * ðŸŽ¯ Features:\n * - Meta tag generation and validation\n * - Structured data helpers\n * - SEO score calculation\n * - SERP preview generation\n * - Educational SEO insights\n *\n * ðŸ“š Learn More:\n * - SEO Fundamentals: /docs/tutorials/seo-basics.md\n * - Schema.org: https://schema.org\n * - Google SEO Guide: https://developers.google.com/search/docs/beginner/seo-starter-guide\n * =============================================================================\n */\n\n/**\n * SEO Configuration and Best Practices\n */\nconst SEO_CONFIG = {\n  // Optimal lengths for meta content\n  titleLength: { min: 30, max: 60, optimal: 55 },\n  descriptionLength: { min: 120, max: 160, optimal: 155 },\n\n  // Social media optimal sizes\n  ogImage: { width: 1200, height: 630 },\n  twitterImage: { width: 1200, height: 600 },\n\n  // Structured data types for educational content\n  schemaTypes: {\n    educational: 'LearningResource',\n    tutorial: 'HowTo',\n    course: 'Course',\n    article: 'Article',\n    faq: 'FAQPage'\n  },\n\n  // Validation thresholds\n  excellentThreshold: 5,\n  maxTitleSeparators: 2,\n  maxDescriptionSeparators: 3,\n  // Score weights\n  scoreExcellent: 100,\n  scoreGood: 80,\n  scoreAverage: 60,\n  scorePoor: 40,\n  scoreHeadingBonus: 50,\n  scoreImagePenalty: 20,\n  scoreWordCountDivisor: 10,\n  minWordCount: 300,\n  // Grade thresholds\n  gradeAThreshold: 90,\n  gradeBThreshold: 80,\n  gradeCThreshold: 70,\n  gradeDThreshold: 60,\n  // SERP display limits\n  serpTitleMax: 60,\n  serpTitleTruncateAt: 57,\n  serpDescriptionMax: 160,\n  serpDescriptionTruncateAt: 157\n};\n\n/**\n * Validate title tag for SEO best practices\n * @param {string} title - Page title\n * @returns {Object} Validation results with recommendations\n */\nexport const validateTitle = function validateTitle(title) {\n  const { length } = title;\n  const { min, max, optimal } = SEO_CONFIG.titleLength;\n\n  const result = {\n    length,\n    status: 'good',\n    message: '',\n    recommendations: []\n  };\n\n  if (length < min) {\n    result.status = 'warning';\n    result.message = `Title is too short (${length} chars). Aim for ${min}-${max} characters.`;\n    result.recommendations.push('Add more descriptive keywords');\n    result.recommendations.push('Include your brand name');\n  } else if (length > max) {\n    result.status = 'error';\n    result.message = `Title is too long (${length} chars) and will be truncated. Keep under ${max} characters.`;\n    result.recommendations.push('Remove unnecessary words');\n    result.recommendations.push('Focus on primary keywords');\n  } else if (Math.abs(length - optimal) <= SEO_CONFIG.excellentThreshold) {\n    result.status = 'excellent';\n    result.message = `Perfect title length (${length} chars)!`;\n  }\n\n  // Check for common issues\n  if (title.toLowerCase().includes('untitled') || title.toLowerCase().includes('home')) {\n    result.recommendations.push('Avoid generic titles like \"Home\" or \"Untitled\"');\n  }\n\n  if (title.split('|').length > SEO_CONFIG.maxTitleSeparators || title.split('-').length > SEO_CONFIG.maxDescriptionSeparators) {\n    result.recommendations.push('Avoid excessive separators - keep title readable');\n  }\n\n  return result;\n};\n\n/**\n * Validate meta description for SEO best practices\n * @param {string} description - Meta description\n * @returns {Object} Validation results with recommendations\n */\nexport const validateDescription = function validateDescription(description) {\n  const { length } = description;\n  const { min, max, optimal } = SEO_CONFIG.descriptionLength;\n\n  const result = {\n    length,\n    status: 'good',\n    message: '',\n    recommendations: []\n  };\n\n  if (length < min) {\n    result.status = 'warning';\n    result.message = `Description is too short (${length} chars). Aim for ${min}-${max} characters.`;\n    result.recommendations.push('Add more detail about the page content');\n    result.recommendations.push('Include a compelling reason to click');\n  } else if (length > max) {\n    result.status = 'warning';\n    result.message = `Description is too long (${length} chars) and will be truncated. Keep under ${max} characters.`;\n    result.recommendations.push('Focus on the most important information');\n    result.recommendations.push('Move details to the page content');\n  } else if (Math.abs(length - optimal) <= SEO_CONFIG.excellentThreshold) {\n    result.status = 'excellent';\n    result.message = `Perfect description length (${length} chars)!`;\n  }\n\n  // Check for common issues\n  if (!description.match(/[.!?]$/u)) {\n    result.recommendations.push('End with punctuation for better readability');\n  }\n\n  if (description.toLowerCase().includes('click here') || description.toLowerCase().includes('read more')) {\n    result.recommendations.push('Avoid generic CTAs - be specific about value');\n  }\n\n  return result;\n};\n\n/**\n * Extract and set defaults for meta tag configuration\n * @param {Object} options - Meta tag options\n * @returns {Object} Processed configuration\n */\nconst extractMetaConfig = options => ({\n  title: options.title,\n  description: options.description,\n  keywords: options.keywords,\n  author: options.author,\n  image: options.image,\n  url: options.url,\n  type: options.type || 'website',\n  locale: options.locale || 'en_US',\n  alternates: options.alternates || [],\n  noindex: options.noindex || false,\n  canonical: options.canonical\n});\n\n/**\n * Create the meta tags structure\n * @returns {Object} Empty meta tags structure\n */\nconst createMetaTagsStructure = () => ({\n  basic: [],\n  openGraph: [],\n  twitter: [],\n  educational: []\n});\n\n/**\n * Add keywords meta tag if provided\n * @param {Object} metaTags - Meta tags structure\n * @param {Array} keywords - Keywords array\n */\nconst addKeywordsTags = (metaTags, keywords) => {\n  if (keywords && keywords.length > 0) {\n    metaTags.basic.push({\n      name: 'keywords',\n      content: keywords.join(', '),\n      insight: {\n        note: 'Keywords meta tag has minimal SEO impact but helps with content organization',\n        recommendation: 'Focus on natural keyword usage in content instead'\n      }\n    });\n  }\n};\n\n/**\n * Add author meta tag if provided\n * @param {Object} metaTags - Meta tags structure\n * @param {string} author - Author name\n */\nconst addAuthorTag = (metaTags, author) => {\n  if (author) {\n    metaTags.basic.push({\n      name: 'author',\n      content: author,\n      insight: {\n        note: 'Author tag helps establish credibility and authorship',\n        recommendation: 'Consider implementing Author schema markup for better attribution'\n      }\n    });\n  }\n};\n\n/**\n * Add robots meta tag if needed\n * @param {Object} metaTags - Meta tags structure\n * @param {boolean} noindex - Whether to noindex\n */\nconst addRobotsTag = (metaTags, noindex) => {\n  if (noindex) {\n    metaTags.basic.push({\n      name: 'robots',\n      content: 'noindex, nofollow',\n      insight: {\n        warning: 'This page will not be indexed by search engines',\n        useCase: 'Use for private, duplicate, or low-quality content'\n      }\n    });\n  }\n};\n\n/**\n * Add canonical link tag\n * @param {Object} metaTags - Meta tags structure\n * @param {string} canonical - Canonical URL\n * @param {string} url - Current URL\n */\nconst addCanonicalTag = (metaTags, canonical, url) => {\n  if (canonical || url) {\n    metaTags.basic.push({\n      tag: 'link',\n      rel: 'canonical',\n      href: canonical || url,\n      insight: {\n        note: 'Canonical URL prevents duplicate content issues',\n        recommendation: 'Always set canonical URLs for content that appears on multiple URLs'\n      }\n    });\n  }\n};\n\n/**\n * Add basic meta tags\n * @param {Object} metaTags - Meta tags structure\n * @param {Object} config - Configuration\n */\nconst addBasicMetaTags = (metaTags, config) => {\n  // Title tag\n  metaTags.basic.push({\n    tag: 'title',\n    content: config.title,\n    insight: validateTitle(config.title)\n  });\n\n  // Description tag\n  metaTags.basic.push({\n    name: 'description',\n    content: config.description,\n    insight: validateDescription(config.description)\n  });\n\n  // Optional tags\n  addKeywordsTags(metaTags, config.keywords);\n  addAuthorTag(metaTags, config.author);\n  addRobotsTag(metaTags, config.noindex);\n  addCanonicalTag(metaTags, config.canonical, config.url);\n};\n\n/**\n * Add Open Graph meta tags\n * @param {Object} metaTags - Meta tags structure\n * @param {Object} config - Configuration\n */\nconst addOpenGraphTags = (metaTags, config) => {\n  metaTags.openGraph = [\n    { property: 'og:title', content: config.title },\n    { property: 'og:description', content: config.description },\n    { property: 'og:type', content: config.type },\n    { property: 'og:url', content: config.url },\n    { property: 'og:locale', content: config.locale }\n  ];\n\n  if (config.image) {\n    metaTags.openGraph.push(\n      { property: 'og:image', content: config.image },\n      { property: 'og:image:width', content: SEO_CONFIG.ogImage.width },\n      { property: 'og:image:height', content: SEO_CONFIG.ogImage.height },\n      {\n        property: 'og:image:alt',\n        content: `Preview image for ${config.title}`,\n        insight: {\n          note: 'Alt text for social media images improves accessibility',\n          recommendation: 'Describe what the image shows, not just repeat the title'\n        }\n      }\n    );\n  }\n\n  // Add language alternates\n  config.alternates.forEach(alt => {\n    metaTags.basic.push({\n      tag: 'link',\n      rel: 'alternate',\n      hreflang: alt.lang,\n      href: alt.url,\n      insight: {\n        note: 'Helps search engines serve the correct language version',\n        example: 'Essential for multilingual sites'\n      }\n    });\n  });\n};\n\n/**\n * Add Twitter Card meta tags\n * @param {Object} metaTags - Meta tags structure\n * @param {Object} config - Configuration\n */\nconst addTwitterTags = (metaTags, config) => {\n  metaTags.twitter = [\n    { name: 'twitter:card', content: config.image ? 'summary_large_image' : 'summary' },\n    { name: 'twitter:title', content: config.title },\n    { name: 'twitter:description', content: config.description }\n  ];\n\n  if (config.image) {\n    metaTags.twitter.push({ name: 'twitter:image', content: config.image });\n  }\n};\n\n/**\n * Add educational insights and tips\n * @param {Object} metaTags - Meta tags structure  \n * @param {Object} config - Configuration\n */\nconst addEducationalTags = (metaTags, config) => {\n  metaTags.educational = [\n    {\n      topic: 'Title Optimization',\n      current: config.title,\n      analysis: validateTitle(config.title),\n      tips: [\n        'Include primary keyword near the beginning',\n        'Make it compelling to increase click-through rate',\n        'Avoid keyword stuffing',\n        'Consider search intent'\n      ]\n    },\n    {\n      topic: 'Description Optimization',\n      current: config.description,\n      analysis: validateDescription(config.description),\n      tips: [\n        'Include a clear call-to-action',\n        'Use active voice',\n        'Include secondary keywords naturally',\n        'Match search intent'\n      ]\n    }\n  ];\n};\n\n/**\n * Generate comprehensive meta tags for a page\n * @param {Object} options - Meta tag options\n * @returns {Object} Meta tags object with educational insights\n */\nexport const generateMetaTags = options => {\n  const config = extractMetaConfig(options);\n  const metaTags = createMetaTagsStructure();\n  \n  addBasicMetaTags(metaTags, config);\n  addOpenGraphTags(metaTags, config);\n  addTwitterTags(metaTags, config);\n  addEducationalTags(metaTags, config);\n  \n  return metaTags;\n};\n\n/**\n * Generate structured data for educational content\n * @param {Object} data - Content data\n * @returns {Object} JSON-LD structured data\n */\nexport const generateEducationalSchema = function generateEducationalSchema(data) {\n  const {\n    type = 'LearningResource',\n    name,\n    description,\n    url,\n    datePublished,\n    dateModified,\n    author,\n    educationalLevel = 'Beginner',\n    timeRequired,\n    teaches = [],\n    requires = [],\n    image\n  } = data;\n\n  const schema = {\n    '@context': 'https://schema.org',\n    '@type': type,\n    name,\n    description,\n    url,\n    datePublished,\n    dateModified: dateModified || datePublished,\n    author: {\n      '@type': 'Organization',\n      name: author || 'BSB Learning Platform'\n    },\n    provider: {\n      '@type': 'Organization',\n      name: 'Branded Static Boilerplate',\n      url: 'https://github.com/madfam-io/branded-static-boilerplate'\n    },\n    educationalLevel,\n    learningResourceType: 'Interactive Tutorial',\n    inLanguage: 'en-US',\n    isAccessibleForFree: true,\n    license: 'https://opensource.org/licenses/MIT'\n  };\n\n  // Add optional fields\n  if (timeRequired) {\n    schema.timeRequired = timeRequired;\n  }\n\n  if (teaches.length > 0) {\n    schema.teaches = teaches.map(skill => ({\n      '@type': 'DefinedTerm',\n      name: skill\n    }));\n  }\n\n  if (requires.length > 0) {\n    schema.competencyRequired = requires.map(skill => ({\n      '@type': 'DefinedTerm',\n      name: skill\n    }));\n  }\n\n  if (image) {\n    schema.image = image;\n  }\n\n  return schema;\n};\n\n/**\n * Generate FAQ structured data\n * @param {Array} faqs - Array of FAQ items\n * @returns {Object} FAQ schema\n */\nexport const generateFAQSchema = function generateFAQSchema(faqs) {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'FAQPage',\n    mainEntity: faqs.map(faq => ({\n      '@type': 'Question',\n      name: faq.question,\n      acceptedAnswer: {\n        '@type': 'Answer',\n        text: faq.answer\n      }\n    }))\n  };\n};\n\n/**\n * Generate breadcrumb structured data\n * @param {Array} breadcrumbs - Array of breadcrumb items\n * @returns {Object} Breadcrumb schema\n */\nexport const generateBreadcrumbSchema = function generateBreadcrumbSchema(breadcrumbs) {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: breadcrumbs.map((item, index) => ({\n      '@type': 'ListItem',\n      position: index + 1,\n      name: item.name,\n      item: item.url\n    }))\n  };\n};\n\n/**\n * Get letter grade from numeric score\n * @param {number} score - Numeric score (0-100)\n * @returns {string} Letter grade\n */\nconst getGradeFromScore = function getGradeFromScore(score) {\n  if (score >= SEO_CONFIG.gradeAThreshold) {\n    return 'A';\n  }\n  if (score >= SEO_CONFIG.gradeBThreshold) {\n    return 'B';\n  }\n  if (score >= SEO_CONFIG.gradeCThreshold) {\n    return 'C';\n  }\n  if (score >= SEO_CONFIG.gradeDThreshold) {\n    return 'D';\n  }\n  return 'F';\n\n};\n\n/**\n * Calculate comprehensive SEO score\n * @param {Object} page - Page data to analyze\n * @returns {Object} SEO score with detailed breakdown\n */\nexport const calculateSEOScore = async function calculateSEOScore(page) {\n  // Import score calculators at the top of the function\n  const {\n    calculateTitleScore,\n    calculateDescriptionScore,\n    calculateHeadingsScore,\n    calculateImagesScore,\n    calculateLinksScore,\n    calculateContentScore,\n    calculateTechnicalScore\n  } = await import('./seo-score-calculators.js');\n\n  // Calculate individual scores\n  const titleScore = calculateTitleScore(page.title);\n  const descriptionScore = calculateDescriptionScore(page.description);\n  const headingsResult = calculateHeadingsScore(page);\n  const imagesResult = calculateImagesScore(page);\n  const linksResult = calculateLinksScore(page);\n  const contentResult = calculateContentScore(page);\n  const technicalScore = calculateTechnicalScore(page);\n\n  // Compile scores\n  const scores = {\n    title: titleScore,\n    description: descriptionScore,\n    headings: headingsResult.score,\n    images: imagesResult.score,\n    links: linksResult.score,\n    content: contentResult.score,\n    technical: technicalScore\n  };\n\n  // Compile insights\n  const insights = [\n    ...headingsResult.insights,\n    ...imagesResult.insights,\n    ...linksResult.insights,\n    ...contentResult.insights\n  ];\n\n  // Calculate overall score\n  const overallScore = Math.round(\n    Object.values(scores).reduce((accumulator, currentValue) =>\n      accumulator + currentValue, 0\n    ) / Object.keys(scores).length\n  );\n\n  return {\n    overall: overallScore,\n    breakdown: scores,\n    insights,\n    grade: getGradeFromScore(overallScore)\n  };\n};\n\n/**\n * Generate SERP (Search Engine Results Page) preview\n * @param {Object} data - Page data\n * @returns {Object} SERP preview data\n */\nexport const generateSERPPreview = function generateSERPPreview(data) {\n  const { title, description, url } = data;\n\n  // Truncate title if needed\n  const displayTitle = title.length > SEO_CONFIG.serpTitleMax\n    ? `${title.substring(0, SEO_CONFIG.serpTitleTruncateAt)}...`\n    : title;\n\n  // Truncate description if needed\n  const displayDescription = description.length > SEO_CONFIG.serpDescriptionMax\n    ? `${description.substring(0, SEO_CONFIG.serpDescriptionTruncateAt)}...`\n    : description;\n\n  // Format URL for display\n  const urlParts = new URL(url);\n  const breadcrumb = urlParts.hostname + urlParts.pathname.replace(/\\/$/u, '');\n\n  return {\n    title: displayTitle,\n    titleTruncated: title.length > SEO_CONFIG.serpTitleMax,\n    description: displayDescription,\n    descriptionTruncated: description.length > SEO_CONFIG.serpDescriptionMax,\n    url: breadcrumb,\n    preview: {\n      desktop: {\n        width: 600,\n        titleColor: '#1a0dab',\n        urlColor: '#006621',\n        descriptionColor: '#545454'\n      },\n      mobile: {\n        width: 400,\n        titleColor: '#1a0dab',\n        urlColor: '#006621',\n        descriptionColor: '#545454'\n      }\n    }\n  };\n};\n\n/**\n * Export all SEO utilities\n */\nexport default {\n  generateMetaTags,\n  validateTitle,\n  validateDescription,\n  generateEducationalSchema,\n  generateFAQSchema,\n  generateBreadcrumbSchema,\n  calculateSEOScore,\n  generateSERPPreview,\n  SEO_CONFIG\n};","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"valid-jsdoc","replacedBy":[]},{"ruleId":"require-jsdoc","replacedBy":[]},{"ruleId":"max-statements-per-line","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"wrap-iife","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
